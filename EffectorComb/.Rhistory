'input.plotShowTooltip',
selectInput("plotVarTooltip", NULL, choices= NULL, selected= NULL, multiple = TRUE))),
conditionalPanel(
paste0('input.graphType == "Circular" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "Line" | ',
'input.graphType == "Radar"'),
# fluidRow(column(4, p("Plot variables:"),
#                 conditionalPanel("input.plotAdvanced",
#                                  actionButton("plotArrange", "Reorder", class = "btn-primary"))),
#          column(8, selectInput("plotVarMult", NULL, multiple= TRUE, choices= NULL, selected= NULL)))
fluidRow(column(4, p("Plot variables:")),
column(4, actionLink("plotSelectTrain", "Select training vars.")),
column(4, actionLink("plotArrange", "Reorder"))),
fluidRow(selectInput("plotVarMult", NULL, multiple= TRUE, choices= NULL, selected= NULL))),
conditionalPanel('input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "SmoothDist" & input.graphType != "Abstraction"',
uiOutput("plotNames")),
wellPanel(
checkboxInput("plotAdvanced", "Advanced options", FALSE),
conditionalPanel(
"input.plotAdvanced",
## Values to plot: means, medians, prototypes
conditionalPanel(
paste0('input.graphType == "Circular" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "Line" | ',
'input.graphType == "Color" | ',
'input.graphType == "Radar"'),
fluidRow(
column(4, p("Values")),
column(7, selectInput("average_format", NULL,
choices = c("Observation means" = "mean",
"Observation medians" = "median",
"Prototypes" = "prototypes"),
selected = "mean")),
column(1, actionButton("help_average_format", "",
icon = icon("question"), width = NULL)))),
## Variable scales
conditionalPanel(
paste0('input.graphType == "Circular" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "CatBarplot" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "Line" | ',
'input.graphType == "Color" | ',
'input.graphType == "Radar"'),
fluidRow(
column(4, p("Variables scales")),
column(7, selectInput("contrast", NULL,
choices = c("Contrast" = "contrast",
"Observations Range" = "range",
"Same scale" = "same"),
selected = "contrast")),
column(1, actionButton("help_contrast", "",
icon = icon("question"), width = NULL)))),
conditionalPanel(
'input.graphType == "Boxplot"',
checkboxInput("plotOutliers", "Plot outliers", value= TRUE)),
conditionalPanel(
'input.graphType == "Pie"',
checkboxInput("plotEqualSize", "Equal pie sizes", FALSE)),
conditionalPanel(
'input.graphType == "Color" | input.graphType == "UMatrix"',
checkboxInput("plotShowSC", "Show superclasses", TRUE)),
conditionalPanel(
'input.graphType == "Cloud"',
fluidRow(
column(4, p("Cloud type")),
column(5, selectInput("plotCloudType", NULL,
c("Cell-wise PCA" = "cellPCA",
"Cell-centered kPCA" = "kPCA",
"Cell-centered PCA" = "PCA",
"Prototype Proximity" = "proximity",
"Random" = "random"))),
column(2, actionButton("help_cloud", "", icon = icon("question"), width = NULL)))),
conditionalPanel(
'input.graphType == "Cloud" & input.plotCloudType == "random"',
fluidRow(
column(4, p("Cloud seed")),
column(7, numericInput("plotCloudSeed", NULL, sample(1e5, 1), 1, step = 1)))),
## Show axes
conditionalPanel(
paste0('input.graphType == "Circular" | ',
'input.graphType == "Line" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "CatBarplot" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "Radar"'),
checkboxInput("plotAxes", "Show axes", value= TRUE)),
## Use transparency
conditionalPanel(
paste0('input.graphType == "Hitmap" | ',
'input.graphType == "Cloud" | ',
'input.graphType == "Circular" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "CatBarplot" | ',
'input.graphType == "Radar"'),
checkboxInput("plotTransparency", "Use transparency", value= TRUE)),
conditionalPanel(
'input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "Color" & input.graphType != "UMatrix" & input.graphType != "SmoothDist"',
fluidRow(column(4, p("Superclass palette")),
column(8, selectInput("palsc", NULL,
c("viridis", "grey", "rainbow", "heat", "terrain",
"topo", "cm", rownames(RColorBrewer::brewer.pal.info)),
"Set3")))),
conditionalPanel(
'input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "Hitmap"',
fluidRow(column(4, p("Plots palette")),
column(8, selectInput("palplot", NULL,
c("viridis", "grey", "rainbow", "heat", "terrain",
"topo", "cm", rownames(RColorBrewer::brewer.pal.info)),
"viridis"))),
checkboxInput("plotRevPal", "Reverse palette")),
conditionalPanel(
'input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "SmoothDist"',
checkboxInput("plotShowNames", "Show obs. names", value= TRUE)),
conditionalPanel(
paste0('input.graphType == "Circular" | ',
'input.graphType == "Barplot" | ',
'input.graphType == "Color" | ',
'input.graphType == "UMatrix" | ',
'input.graphType == "Boxplot" | ',
'input.graphType == "Line" | ',
'input.graphType == "Cloud" | ',
'input.graphType == "CatBarplot" | ',
'input.graphType == "Pie" | ',
'input.graphType == "SmoothDist"'),
fluidRow(column(4, p("Legend")),
column(3, numericInput("legendFontsize", NULL, 14, 1, NA, .5)),
column(5, conditionalPanel(
'input.graphType != "SmoothDist"',
selectInput("legendPos", NULL,
c("Beside" = "beside", "Below" = "below",
"None" = "none"),
"beside")))))
)
),
hr(),
fluidRow(column(4, h4("Plot size:")),
column(8, sliderInput("plotSize", NULL, 10, 4000, value= 400))),
hr(),
h4("Superclasses:"),
fluidRow(column(3, numericInput('kohSuperclass', NULL, 2, min= 1)),
column(5, selectInput('sup_clust_method', NULL,
c("hierarchical", "pam"))),
column(4, conditionalPanel(
'input.sup_clust_method == "hierarchical"',
selectInput("sup_clust_hcmethod", NULL,
c("ward.D2", "ward.D", "single", "complete",
"average", "mcquitty", "median", "centroid"),
"complete")))),
hr(),
conditionalPanel('input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "SmoothDist"',
fluidRow(column(2, h4("Save:")),
column(5, downloadButton('downloadInteractive', "Interactive (html)")),
# column(3, downloadButton('downloadPng', 'png')),
column(5, downloadButton('downloadSvg', 'Static (svg)'))),
hr()),
uiOutput("plotWarning")),
column(8,
## Display only the chosen graph
conditionalPanel('input.graphType == "Dendrogram"',
plotOutput("plotDendrogram")),
conditionalPanel('input.graphType == "Screeplot"',
plotOutput("plotScreeplot")),
conditionalPanel('input.graphType == "Silhouette"',
plotOutput("plotSilhouette")),
conditionalPanel('input.graphType == "SmoothDist"',
plotOutput("plotSmoothDist")),
## D3-based plots
conditionalPanel(
'input.graphType != "Silhouette" & input.graphType != "Dendrogram" & input.graphType != "Screeplot" & input.graphType != "SmoothDist"',
HTML('<h4 id="theWidget-info"></h4>'),
HTML('<h4 id="theWidget-message"></h4>'),
aweSOM:::aweSOMoutput("theWidget"),
conditionalPanel(
"input.plotShowNames",
wellPanel(HTML('<p id="theWidget-names">Observation names will appear here.</p>'))),
conditionalPanel(
'input.graphType != "Radar" & input.graphType != "Line" & input.graphType != "Heat" & input.graphType != "Hitmap"',
HTML('<svg id="theWidget-newlegend", width="100%"></svg>'))
)
))),
############################################################################
#### Panel 'Export data'
############################################################################
tabPanel(
"Export data",
fluidRow(
column(4,
h4("Download full map"),
p("The rds file containing the trained map can be opened in R with readRDS."),
downloadButton("somDownload", "Download SOM (rds file)", class = "btn-primary"),
h4("Download clustered data (csv)"),
downloadButton("clustDownload", "Download Clustering (csv file)", class = "btn-primary"),
h5("Selected variables"),
fluidRow(column(4, actionButton("clustSelectNone", "Unselect all")),
column(4, actionButton("clustSelectTrain", "Select train")),
column(4, actionButton("clustSelectAll", "Select all"))),
uiOutput("clustVariables")),
column(8, DT::dataTableOutput("clustTable")))),
############################################################################
#### Panel 'R script'
############################################################################
tabPanel(
"R Script",
fluidRow(column(6, h4("Run this script in R to reproduce the results.")),
column(3, uiOutput("copycode")),
column(3, downloadButton("report", "Save html report", class = "btn-primary"))),
verbatimTextOutput("codeTxt")),
############################################################################
#### Panel 'About'
############################################################################
tabPanel(
"About",
fluidRow(column(
6,
HTML('<table><tr>
<td width= "50%" height= "139" align="center" valign="middle"><img src="logo.png" alt="<aweSOM>" width="120"/></td>
<td width="50%" height="139" align="left" valign="middle"><h3>interactive self-organizing maps</h3></td>
</tr></table>'),
wellPanel(HTML('<p><strong>aweSOM</strong> offers a set of tools to explore and analyze numeric
data with Self-Organizing Maps (also known as <a href="https://en.wikipedia.org/wiki/Self-organizing_map">Kohonen maps</a>),
a form of artificial neural network originally created by <a href="https://en.wikipedia.org/wiki/Teuvo_Kohonen">Teuvo Kohonen</a>
in the 1980s. The package introduces interactive plots, making visual inspection of the SOM easier.</p>'),
HTML("<p> Use this interface to train and visualize SOMs, using the tabs above in sequence : <br>
<strong>Import Data:</strong> Import the data to analyze<br>
<strong>Train:</strong> Train the SOM on selected variables<br>
<strong>Plot:</strong> Visualize the trained SOM <br>
<strong>Export Data:</strong> Export the trained SOM or clustered data <br>
<strong>R Script:</strong> Generate the R script to reproduce your analysis in R</p>"),
HTML("<p> While standard SOM works on numeric data only, aweSOM handles
<strong>categorical variables</strong> through dummy-encoding and
appropriate scaling, so that each variable has the same total variance (as in MCA).
As in <strong>specific</strong> MCA, chosen levels can be dropped from the training data.
The treatment of <strong>mixed data</strong> is equivalent to the one in FAMD (factorial analysis of mixed data).</p>")),
h3("References"),
HTML("Kohonen T. (2001) <em>Self-Organizing Maps</em>, 3rd edition, Springer Press, Berlin.")),
column(6, img(src = "Teuvo-Kohonen.jpg",
alt= "Here a portrait of Teuvo Kohonen.",
width= "100%",
style = "margin:10px; padding: 0px 0px"),
HTML("<p>Teuvo Kohonen, inventor of the SOM, in the early 1980s. \
Image source: wikipedia, <a href='https://creativecommons.org/licenses/by/4.0/deed.en'> CC-BY 4.0 </a></p>")))
)
)
)
source("~/Workspace/PhytoPhD/ShinyApps/app_aweSOM/aweSOM_sapp.R")
runApp('Workspace/PhytoPhD/ShinyApps/app_aweSOM/aweSOM_sapp.R')
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
library(aweSOM)
library(readr)
full.data <-read_tsv("/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/unify_scaled_comp_choice_ALL_dset_func_analysis.tsv")
### select variables
train.data <- as.matrix(full.data[, c("sequence length","signal peptide","transmembrane domain","aa in tr domain","first 60 aa",
"prob N-in","MobiDB-lite", "CAMP_PHOSPHO_SITE",
"PKC_PHOSPHO_SITE", "CK2_PHOSPHO_SITE", "MYRISTYL", "AMIDATION", "ASN_GLYCOSYLATION","L=0",
"LEUCINE_ZIPPER","MICROBODIES_CTER", "RGD", "TYR_PHOSPHO_SITE_1", "TYR_PHOSPHO_SITE_2",
"CLUMP0","CLUMP3","CLUMP5","CLUMP6","CLUMP7","CLUMP8", "bin1", "bin2", "bin3", "bin4")])
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 8, 8)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(8, 8, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
somQuality(data.som, train.data)
### superclasses SOM
superclust_hclust <- hclust(dist(data.som$codes[[1]]), "average")
# superclasses_hclust <- cutree(superclust_hclust, 12)
### PLOT
aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
runApp('Downloads/Metabolo_LungCancer_shinyapp.R')
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/ShinyApps/R-Shiny-for-Clustering/Main.R')
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/ShinyApps/R-Shiny-for-Clustering/Main.R')
library(aweSOM)
library(readr)
full.data <-read_tsv("/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/unify_scaled_comp_choice_ALL_dset_func_analysis.tsv")
### select variables
train.data <- as.matrix(full.data[, c("sequence length","signal peptide","transmembrane domain","aa in tr domain","first 60 aa",
"prob N-in","MobiDB-lite", "CAMP_PHOSPHO_SITE",
"PKC_PHOSPHO_SITE", "CK2_PHOSPHO_SITE", "MYRISTYL", "AMIDATION", "ASN_GLYCOSYLATION","L=0",
"LEUCINE_ZIPPER","MICROBODIES_CTER", "RGD", "TYR_PHOSPHO_SITE_1", "TYR_PHOSPHO_SITE_2",
"CLUMP0","CLUMP3","CLUMP5","CLUMP6","CLUMP7","CLUMP8", "bin1", "bin2", "bin3", "bin4")])
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 10, 10)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(10, 10, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
somQuality(data.som, train.data)
### superclasses SOM
superclust_hclust <- hclust(dist(data.som$codes[[1]]), "average")
# superclasses_hclust <- cutree(superclust_hclust, 12)
### PLOT
aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
library(aweSOM)
library(readr)
full.data <-read_tsv("/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/unify_scaled_comp_choice_ALL_dset_func_analysis.tsv")
### select variables
train.data <- as.matrix(full.data[, c("sequence length","signal peptide","transmembrane domain","aa in tr domain","first 60 aa",
"prob N-in","MobiDB-lite", "CAMP_PHOSPHO_SITE",
"PKC_PHOSPHO_SITE", "CK2_PHOSPHO_SITE", "MYRISTYL", "AMIDATION", "ASN_GLYCOSYLATION","L=0",
"LEUCINE_ZIPPER","MICROBODIES_CTER", "RGD", "TYR_PHOSPHO_SITE_1", "TYR_PHOSPHO_SITE_2",
"CLUMP0","CLUMP3","CLUMP5","CLUMP6","CLUMP7","CLUMP8", "bin1", "bin2", "bin3", "bin4")])
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 20, 20)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(20, 20, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
somQuality(data.som, train.data)
### superclasses SOM
superclust_hclust <- hclust(dist(data.som$codes[[1]]), "average")
# superclasses_hclust <- cutree(superclust_hclust, 12)
### PLOT
aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(8, 8, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
library(aweSOM)
library(readr)
full.data <-read_tsv("/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/unify_scaled_comp_choice_ALL_dset_func_analysis.tsv")
### select variables
train.data <- as.matrix(full.data[, c("sequence length","signal peptide","transmembrane domain","aa in tr domain","first 60 aa",
"prob N-in","MobiDB-lite", "CAMP_PHOSPHO_SITE",
"PKC_PHOSPHO_SITE", "CK2_PHOSPHO_SITE", "MYRISTYL", "AMIDATION", "ASN_GLYCOSYLATION","L=0",
"LEUCINE_ZIPPER","MICROBODIES_CTER", "RGD", "TYR_PHOSPHO_SITE_1", "TYR_PHOSPHO_SITE_2",
"CLUMP0","CLUMP3","CLUMP5","CLUMP6","CLUMP7","CLUMP8", "bin1", "bin2", "bin3", "bin4")])
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 8, 8)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(8, 8, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
somQuality(data.som, train.data)
### superclasses SOM
superclust_hclust <- hclust(dist(data.som$codes[[1]]), "average")
# superclasses_hclust <- cutree(superclust_hclust, 12)
### PLOT
aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
library(aweSOM)
library(readr)
full.data <-read_tsv("/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/unify_scaled_comp_choice_ALL_dset_func_analysis.tsv")
### select variables
train.data <- as.matrix(full.data[, c("sequence length","signal peptide","transmembrane domain","aa in tr domain","first 60 aa",
"prob N-in","MobiDB-lite", "CAMP_PHOSPHO_SITE",
"PKC_PHOSPHO_SITE", "CK2_PHOSPHO_SITE", "MYRISTYL", "AMIDATION", "ASN_GLYCOSYLATION","L=0",
"LEUCINE_ZIPPER","MICROBODIES_CTER", "RGD", "TYR_PHOSPHO_SITE_1", "TYR_PHOSPHO_SITE_2",
"CLUMP0","CLUMP3","CLUMP5","CLUMP6","CLUMP7","CLUMP8", "bin1", "bin2", "bin3", "bin4")])
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 8, 8)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(8, 8, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
somQuality(data.som, train.data)
### superclasses SOM
superclust_hclust <- hclust(dist(data.som$codes[[1]]), "average")
# superclasses_hclust <- cutree(superclust_hclust, 12)
### PLOT
plot <- aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
#superclass = superclasses_hclust)
htmlwidgets::saveWidget(as_widget(plot), "/home/giulia/Workspace/PhytoPhD/period_abroad/functional_analysis/index.html")
runApp('Workspace/PhytoPhD/ShinyApps/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/ShinyApps/R-Shiny-for-Clustering/Main.R')
runApp('Workspace/PhytoPhD/ShinyApps/R-Shiny-for-Clustering/Main.R')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
aweSOMplot(som = data.som, type = "Pie", data = full.data, variables = "spec_id")
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
install.packages("exportwidget")
install.packages('widget2png')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
View(data.som)
data.som[["unit.classif"]]
data.som[["grid"]]
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
View(data.som)
# aweSOMsilhouette(data.som, superclasses_pam)
full.data["cell"] <- data.som[["unit.classif"]]
View(full.data)
subset(full.data, cell = 3)
subset(full.data, 'cell' = 3)
subset(full.data, cell == 3)
### PLOT
plot <- aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
### RNG Seed (for reproducibility)
set.seed(42)
### Initialization (PCA grid)
init <- somInit(train.data, 8, 8)
data.som <- kohonen::som(
train.data,
grid = kohonen::somgrid(8, 8, "hexagonal"),
rlen = 250,
alpha = c(0.05, 0.01),
radius = c(2.65, -2.65),
dist.fcts = "euclidean",
init = init
)
### PLOT
plot <- aweSOMplot(som = data.som,
type = "Cloud",
data = full.data,
variables = c("ncs"))  #,
#superclass = superclasses_hclust)
plot
subset(full.data, cell == 3, select=c('seq_id', "spec_id"))
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
shiny::runApp('Workspace/PhytoPhD/git_projects/LEAF/app_LEAF/LEAF_SOM')
shiny::runApp()
runApp()
